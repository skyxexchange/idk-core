{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  // BASE = 8453,\n  BASE_TESTNET = 84531,\n}\n\nexport const SUPPORTED_CHAINS = [\n  // ChainId.BASE,\n  ChainId.BASE_TESTNET,\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  // BASE = 'ETH',\n  BASE_TESTNET = 'ETH',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n  permit2Address?: string\n}\n\n// const BASE_ADDRESSES: ChainAddresses = {\n//   v3CoreFactoryAddress: '',\n//   multicallAddress: '',\n//   quoterAddress: '',\n//   v3MigratorAddress: '',\n//   nonfungiblePositionManagerAddress: '',\n//   tickLensAddress: '',\n//   swapRouter02Address: '',\n//   v1MixedRouteQuoterAddress: '',\n//   permit2Address: '0xC811B24C89Ad5a984e4E2244B9f7606eb5425F7B',\n// }\n\nconst BASE_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8C1FF117c5ad343Ddac145A9c1C974E704B8c3eD',\n  multicallAddress: '0x7B9932Fd9677F42D52F779E417151868b5e039b8',\n  quoterAddress: '0x9BC49821598468798419f6A41bCd150b98AC4663',\n  v3MigratorAddress: '0x4eb9160392B570c7E03fE5f9E24620c592fd465B',\n  nonfungiblePositionManagerAddress: '0x8B6d61375475E2F7BD58B7B91Dc662E5D328cb68',\n  tickLensAddress: '0x6d94EB818CA9e27D15D1bbb7DE7d19D1DD6F17CE',\n  swapRouter02Address: '0x9CcFFAd91B3f76EC1A5BcBD0355D87Cf86073Cdb',\n  v1MixedRouteQuoterAddress: '0xAC2E122d94002cF6120d5648F46aA6C266f5CB05',\n  permit2Address: '0xC811B24C89Ad5a984e4E2244B9f7606eb5425F7B',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  // [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_TESTNET]: BASE_TESTNET_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3CoreFactoryAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    if (v3CoreFactoryAddress) {\n      memo[chainId] = v3CoreFactoryAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const multicallAddress = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    if (multicallAddress) {\n      memo[chainId] = multicallAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const quoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    if (quoterAddress) {\n      memo[chainId] = quoterAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const SWAP_ROUTER_02_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const swapRoutersAddress = CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n    if (swapRoutersAddress) {\n      memo[chainId] = swapRoutersAddress\n    }\n    return memo\n  }, {})\n}","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in SkyX without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the SkyX contracts. Currencies must\n   * implement this to be used in SkyX\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  // [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped ETH'),\n  [84531]: new Token(84531, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped ETH'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","BASE_TESTNET","NativeCurrencyName","TradeType","Rounding","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","tickLensAddress","swapRouter02Address","v1MixedRouteQuoterAddress","permit2Address","V3_CORE_FACTORY_ADDRESSES","_extends","reduce","memo","chainId","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","TICK_LENS_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","swapRoutersAddress","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","address","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","test","checkValidAddress","toLowerCase","sortsBefore","WETH9","_WETH","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}