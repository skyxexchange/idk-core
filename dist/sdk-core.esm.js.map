{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  // BASE = 8453,\n  BASE_TESTNET = 84531,\n}\n\nexport const SUPPORTED_CHAINS = [\n  // ChainId.BASE,\n  ChainId.BASE_TESTNET,\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  // BASE = 'ETH',\n  BASE_TESTNET = 'ETH',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n  permit2Address?: string\n}\n\n// const BASE_ADDRESSES: ChainAddresses = {\n//   v3CoreFactoryAddress: '',\n//   multicallAddress: '',\n//   quoterAddress: '',\n//   v3MigratorAddress: '',\n//   nonfungiblePositionManagerAddress: '',\n//   tickLensAddress: '',\n//   swapRouter02Address: '',\n//   v1MixedRouteQuoterAddress: '',\n//   permit2Address: '0xC811B24C89Ad5a984e4E2244B9f7606eb5425F7B',\n// }\n\nconst BASE_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8C1FF117c5ad343Ddac145A9c1C974E704B8c3eD',\n  multicallAddress: '0x7B9932Fd9677F42D52F779E417151868b5e039b8',\n  quoterAddress: '0x9BC49821598468798419f6A41bCd150b98AC4663',\n  v3MigratorAddress: '0x4eb9160392B570c7E03fE5f9E24620c592fd465B',\n  nonfungiblePositionManagerAddress: '0x8B6d61375475E2F7BD58B7B91Dc662E5D328cb68',\n  tickLensAddress: '0x6d94EB818CA9e27D15D1bbb7DE7d19D1DD6F17CE',\n  swapRouter02Address: '0x9CcFFAd91B3f76EC1A5BcBD0355D87Cf86073Cdb',\n  v1MixedRouteQuoterAddress: '0xAC2E122d94002cF6120d5648F46aA6C266f5CB05',\n  permit2Address: '0xC811B24C89Ad5a984e4E2244B9f7606eb5425F7B',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  // [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_TESTNET]: BASE_TESTNET_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3CoreFactoryAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    if (v3CoreFactoryAddress) {\n      memo[chainId] = v3CoreFactoryAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const multicallAddress = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    if (multicallAddress) {\n      memo[chainId] = multicallAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const quoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    if (quoterAddress) {\n      memo[chainId] = quoterAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const SWAP_ROUTER_02_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const swapRoutersAddress = CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n    if (swapRoutersAddress) {\n      memo[chainId] = swapRoutersAddress\n    }\n    return memo\n  }, {})\n}","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in SkyX without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the SkyX contracts. Currencies must\n   * implement this to be used in SkyX\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  // [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped ETH'),\n  [84531]: new Token(84531, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped ETH'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","BASE_TESTNET","NativeCurrencyName","BASE_TESTNET_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","tickLensAddress","swapRouter02Address","v1MixedRouteQuoterAddress","permit2Address","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","_extends","reduce","memo","chainId","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","TICK_LENS_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","swapRoutersAddress","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","env","NODE_ENV","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","address","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","toLowerCase","sortsBefore","WETH9","_WETH","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}